% #### Reactive
Since user interactions are inherently asynchronous, in that a user clicks on the screen which trigger some action. 
That being accessing a remote or local data source, or simply toggle between dark and light themes, one could leverage the concepts of reactive programming.
To address the race-condition prone shared mutable state that plagues concurrent/reactive programming we want to use immutable state.

By writing a 'state transition table' the developer immediately knows all possible events and states that needs to be handled.
This is useful because it makes it easier to plan the architecture of the application.

% #### Immutability
If we do not address mutable state while doing concurrent computing the application becomes non-deterministic
which is bad since it will lead to unexpected behaivor and is defacto broken by design.



But this becomes hard since there are so many, and context matters when it could be respected or ignored.

These patterns and principles can sometimes not make sense in certain scenarios.

Any pattern is only as good as how consistently it is implemented. 

To try to help with this problem a helper library can be developed to remove the mundane
and boring parts of this approach and let the developer focus on the application flow rather
than implementation details needed just to achieve said desired flow.

Since there are several ways to achieve this using different approaches this helper
library will be opinionated.

It is essentially a library that facilitates a statemachine, but unlike most
state machines it also encourages a certain type of workflow. It will thus be a opinionated
library.